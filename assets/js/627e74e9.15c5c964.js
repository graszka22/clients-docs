"use strict";(self.webpackChunkclients_tutorial=self.webpackChunkclients_tutorial||[]).push([[883,580,991,270],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||o;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5968:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},i=void 0,s={unversionedId:"quickstart/jellyfish-architecture",id:"quickstart/jellyfish-architecture",title:"jellyfish-architecture",description:"You can learn more about Jellyfish architecture in [Jellyfish",source:"@site/docs/quickstart/jellyfish-architecture.mdx",sourceDirName:"quickstart",slug:"/quickstart/jellyfish-architecture",permalink:"/clients-docs/docs/quickstart/jellyfish-architecture",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart/jellyfish-architecture.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"iOS Quickstart Guide",permalink:"/clients-docs/docs/quickstart/ios-quickstart"},next:{title:"React Native / Expo Quickstart Guide",permalink:"/clients-docs/docs/quickstart/react-native-quickstart"}},l={},c=[{value:"Connecting and joining the room",id:"connecting-and-joining-the-room",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can learn more about Jellyfish architecture in ",(0,r.kt)("a",{parentName:"p",href:"https://jellyfish-dev.github.io/jellyfish-docs/"},"Jellyfish\ndocs"),". This section provides a\nbrief description aimed at frontend developers")),(0,r.kt)("p",null,"Let's introduce some concepts first:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Peer")," - A peer is a client-side entity that connects to the server to\npublish, subscribe or publish and subscribe to tracks published by components\nor other peers. You can think of it as a participant in a room. At the moment,\nthere is only one type of peer - WebRTC."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Track")," - An object that represents an audio or video stream. A track can be\nassociated with a local media source, such as a camera or microphone, or a\nremote media source received from another user. Tracks are used to capture,\ntransmit, and receive audio and video data in WebRTC applications."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Room")," - In Jellyfish, a room serves as a holder for peers and components,\nits function varying based on application. From frontend perspective this will\nbe probably one meeting or a broadcast.")),(0,r.kt)("p",null,"For a better understanding of these concepts here is an example of a room that\nholds a standard WebRTC conference from a perspective of the User:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Room example",src:n(2094).Z,width:"1195",height:"1224"})),(0,r.kt)("p",null,"In this example peers stream multiple video and audio tracks. Peer #1 streams\neven two video tracks (camera and screencast track). You can differentiate\nbetween them by using track metadata. User gets info about peers and their\ntracks from the server using Jellyfish Client. User is also informed in real\ntime about peers joining / leaving and tracks being added / removed."),(0,r.kt)("p",null,"To keep this tutorial short we'll simplify things a little. Every peer will stream just one\nvideo track."),(0,r.kt)("h3",{id:"connecting-and-joining-the-room"},"Connecting and joining the room"),(0,r.kt)("p",null,"The general flow of connecting to the server and joining the room in a standard\nWebRTC conference setup looks like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Connecting and joing the room",src:n(8444).Z,width:"2668",height:"1031"})),(0,r.kt)("p",null,"The parts that you need to implement are marked in blue, things handled by\nJellyfish are marked in red."),(0,r.kt)("p",null,"Firstly, the user logs in. Then your backend authenticates the user and obtains\na peer token. It allows the user to authenticate and join the room in Jellyfish\nServer. The backend passes the token to your frontend, and your frontend passes\nit to Jellyfish Client. The client establishes the connection with Jellyfish\nServer. Then Jellyfish Client sets up tracks (camera, microphone) to stream and\njoins the room on Jellyfish Server. Finally your frontend can display the room\nfor the user."),(0,r.kt)("p",null,"For this tutorial we simplified this process a bit - you don't have to implement\na backend or authentication. Jellyfish Dashboard will do this for you. It's also\na nice tool to test and play around with Jellyfish. The flow with Jellyfish\nDashboard looks like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Connecting and joing the room with dashboard",src:n(5001).Z,width:"2668",height:"1031"})),(0,r.kt)("p",null,"You can see that the only things you need to implement are interactions with the\nuser and Jellyfish Client. This tutorial will show you how to do it."))}p.isMDXComponent=!0},2232:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>J,contentTitle:()=>E,default:()=>O,frontMatter:()=>R,metadata:()=>I,toc:()=>q});var a=n(7462),r=n(7294),o=n(3905),i=n(6010),s=n(2466),l=n(6550),c=n(1980),d=n(7392),u=n(12);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=h(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,c]=g({queryString:n,groupId:a}),[d,p]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),k=(()=>{const e=l??d;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{k&&s(k)}),[k]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),p(e)}),[c,p,o]),tabValues:o}}var f=n(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:o,selectValue:l,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.o5)(),p=e=>{const t=e.currentTarget,n=d.indexOf(t),a=c[n].value;a!==o&&(u(t),l(a))},h=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>d.push(e),onKeyDown:h,onClick:p},s,{className:(0,i.Z)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":o===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=k(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",y.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function x(e){const t=(0,f.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}const N={tabItem:"tabItem_Ymn6"};function C(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.Z)(N.tabItem,a),hidden:n},t)}var T=n(5968),S=n(9239),j=n(8823);const R={},E="React Native / Expo Quickstart Guide",I={unversionedId:"quickstart/react-native-quickstart",id:"quickstart/react-native-quickstart",title:"React Native / Expo Quickstart Guide",description:"What you'll learn",source:"@site/docs/quickstart/react-native-quickstart.mdx",sourceDirName:"quickstart",slug:"/quickstart/react-native-quickstart",permalink:"/clients-docs/docs/quickstart/react-native-quickstart",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart/react-native-quickstart.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"jellyfish-architecture",permalink:"/clients-docs/docs/quickstart/jellyfish-architecture"},next:{title:"starting-dashboard",permalink:"/clients-docs/docs/quickstart/starting-dashboard"}},J={},q=[{value:"What you&#39;ll learn",id:"what-youll-learn",level:2},{value:"What do you need",id:"what-do-you-need",level:2},{value:"Jellyfish architecture",id:"jellyfish-architecture",level:2},{value:"Setup",id:"setup",level:2},{value:"Create React Native / Expo project",id:"create-react-native--expo-project",level:3},{value:"Add dependencies",id:"add-dependencies",level:3},{value:"Native configuration",id:"native-configuration",level:3},{value:"Start the Jellyfish backend",id:"start-the-jellyfish-backend",level:3},{value:"Start the dashboard web frontend",id:"start-the-dashboard-web-frontend",level:3},{value:"(Optional) Add components library",id:"optional-add-components-library",level:2},{value:"Connecting to the server and joining the room",id:"connecting-to-the-server-and-joining-the-room",level:2},{value:"Screens",id:"screens",level:3},{value:"Connect screen",id:"connect-screen",level:3},{value:"Connecting to the server",id:"connecting-to-the-server",level:3},{value:"Camera permissions (Android only)",id:"camera-permissions-android-only",level:3},{value:"Starting the camera",id:"starting-the-camera",level:3},{value:"Joining the room",id:"joining-the-room",level:3},{value:"Displaying streams from other participants",id:"displaying-streams-from-other-participants",level:2},{value:"Displaying video tracks",id:"displaying-video-tracks",level:3},{value:"Gracefully leaving the room",id:"gracefully-leaving-the-room",level:3},{value:"Summary",id:"summary",level:2}],A={toc:q},P="wrapper";function O(e){let{components:t,...r}=e;return(0,o.kt)(P,(0,a.Z)({},A,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"react-native--expo-quickstart-guide"},"React Native / Expo Quickstart Guide"),(0,o.kt)("h2",{id:"what-youll-learn"},"What you'll learn"),(0,o.kt)("p",null,"This tutorial will guide you through creating your first React Native / Expo\nproject which uses Jellyfish client. By the end of the tutorial you'll have a\nworking application that connects to the frontend dashboard using WebRTC\ntechnology and streams and receives camera tracks."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Finished app",src:n(1481).Z,width:"320",height:"752"})),(0,o.kt)("p",null,"You can check out the finished project ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graszka22/clients-docs"},"here"),"."),(0,o.kt)("h2",{id:"what-do-you-need"},"What do you need"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a little bit of experience in creating apps with React Native and/or Expo -\nrefer to the ",(0,o.kt)("a",{parentName:"li",href:"https://reactnative.dev/docs/getting-started"},"React Native\nGuide")," or ",(0,o.kt)("a",{parentName:"li",href:"https://docs.expo.dev/"},"Expo\nGuide")," to learn more")),(0,o.kt)("h2",{id:"jellyfish-architecture"},"Jellyfish architecture"),(0,o.kt)(T.default,{mdxType:"JellyfishArchitecture"}),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("h3",{id:"create-react-native--expo-project"},"Create React Native / Expo project"),(0,o.kt)("p",null,"Firstly create a brand new project."),(0,o.kt)(x,{mdxType:"Tabs"},(0,o.kt)(C,{value:"react-native",label:"React Native",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx react-native@latest init JellyfishDashboard\n"))),(0,o.kt)(C,{value:"expo-bare",label:"Expo Bare workflow",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-expo-app --template bare-minimum jellyfish-dashboard\n"))),(0,o.kt)(C,{value:"expo-eas",label:"EAS Build",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-expo-app jellyfish-dashboard\n")))),(0,o.kt)("h3",{id:"add-dependencies"},"Add dependencies"),(0,o.kt)(x,{mdxType:"Tabs"},(0,o.kt)(C,{value:"react-native",label:"React Native",mdxType:"TabItem"},"In order for this module to work you'll need to also add `expo` package. The expo package has a small footprint and it's necessary as Jellyfish Client package is built as Expo module.",(0,o.kt)(x,{groupId:"npm2yarn",mdxType:"Tabs"},(0,o.kt)(C,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx install-expo-modules@latest\nnpm install @jellyfish-dev/react-native-client-sdk\n"))),(0,o.kt)(C,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx install-expo-modules@latest\nyarn add @jellyfish-dev/react-native-client-sdk\n"))),(0,o.kt)(C,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx install-expo-modules@latest\npnpm add @jellyfish-dev/react-native-client-sdk\n"))))),(0,o.kt)(C,{value:"expo-bare",label:"Expo Bare workflow",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"expo install @jellyfish-dev/react-native-client-sdk\n"))),(0,o.kt)(C,{value:"expo-eas",label:"EAS Build",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"expo install @jellyfish-dev/react-native-client-sdk\n")))),(0,o.kt)("h3",{id:"native-configuration"},"Native configuration"),(0,o.kt)("p",null,"In order for camera and audio to work you'll need to add some native configuration:"),(0,o.kt)(x,{mdxType:"Tabs"},(0,o.kt)(C,{value:"react-native",label:"React Native",mdxType:"TabItem"},(0,o.kt)("p",null,"You need to at least set up camera permissions."),(0,o.kt)("p",null,"On Android add to your ",(0,o.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title=AndroidManifest.xml",title:"AndroidManifest.xml"},'  <uses-permission android:name="android.permission.CAMERA"/>\n')),(0,o.kt)("p",null,"For audio you'll need the ",(0,o.kt)("inlineCode",{parentName:"p"},"RECORD_AUDIO")," permission:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title=AndroidManifest.xml",title:"AndroidManifest.xml"},'  <uses-permission android:name="android.permission.RECORD_AUDIO"/>\n')),(0,o.kt)("p",null,"On iOS you must set ",(0,o.kt)("inlineCode",{parentName:"p"},"NSCameraUsageDescription")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"Info.plist")," file. You can\nedit this file in Xcode. This value is a description that is shown when iOS asks user\nfor camera permission."),(0,o.kt)("p",null,"Similarly for audio there is ",(0,o.kt)("inlineCode",{parentName:"p"},"NSMicrophoneUsageDescription"),"."),(0,o.kt)("p",null,"For screencast there is more configuration needed, it's described ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jellyfish-dev/react-native-client-sdk#ios"},"here"),"."),(0,o.kt)("p",null,"We also suggest setting background mode to ",(0,o.kt)("inlineCode",{parentName:"p"},"audio")," so that the app doesn't disconnect when it's in background:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title=Info.plist",title:"Info.plist"},"<key>UIBackgroundModes</key>\n<array>\n  <string>audio</string>\n</array>\n"))),(0,o.kt)(C,{value:"expo-bare",label:"Expo Bare workflow",mdxType:"TabItem"},"You have two options here. You can follow configuration instructions for React Native (Expo Bare workflow is a React Native project after all) or if you're using `expo prebuild` command to set up native code you can add our Expo plugin. Just add it to `app.json`:",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"title:app.json","title:app.json":!0},'{\n  "expo": {\n    "name": "example",\n    //...\n    "plugins": ["@jellyfish-dev/react-native-membrane-webrtc"]\n  }\n}\n'))),(0,o.kt)(C,{value:"expo-eas",label:"EAS Build",mdxType:"TabItem"},(0,o.kt)("p",null,"Jellyfish Client provides Expo plugin that should take care of native configuration for you. Just add it to ",(0,o.kt)("inlineCode",{parentName:"p"},"app.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"title:app.json","title:app.json":!0},'{\n  "expo": {\n    "name": "example",\n    //...\n    "plugins": ["@jellyfish-dev/react-native-membrane-webrtc"]\n  }\n}\n')))),(0,o.kt)("h3",{id:"start-the-jellyfish-backend"},"Start the Jellyfish backend"),(0,o.kt)(S.default,{mdxType:"StartingJellyfishBackend"}),(0,o.kt)("h3",{id:"start-the-dashboard-web-frontend"},"Start the dashboard web frontend"),(0,o.kt)(j.default,{mdxType:"StartingJellyfishDashboard"}),(0,o.kt)("h2",{id:"optional-add-components-library"},"(Optional) Add components library"),(0,o.kt)("p",null,"For your convenience we've prepared a library with nice looking components\nuseful for following this tutorial. Feel free to use standard React Native components or your own components though!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx expo install @expo/vector-icons expo-barcode-scanner expo-font @expo-google-fonts/noto-sans @jellyfish-dev/react-native-jellyfish-components\n")),(0,o.kt)("p",null,"You'll also need to install ",(0,o.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/installation"},"Reanimated library")," and ",(0,o.kt)("a",{parentName:"p",href:"https://reactnavigation.org/"},"React Navigation")),(0,o.kt)("h2",{id:"connecting-to-the-server-and-joining-the-room"},"Connecting to the server and joining the room"),(0,o.kt)("p",null,"Our app will consist of two screens. The first one allows user to type, paste or\nscan the peer token and connect to the room. The second screen shows room\nparticipants with their video tracks."),(0,o.kt)("h3",{id:"screens"},"Screens"),(0,o.kt)("p",null,"For managing screens I've used React Navigation library, you're free though to use another one. Our app will contain two screens: Connect screen and Room screen:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/App.tsx"',title:'"/App.tsx"'},'import React from "react";\nimport { NavigationContainer } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\nimport ConnectScreen from "./screens/Connect";\nimport RoomScreen from "./screens/Room";\n\nconst Stack = createNativeStackNavigator();\n\nfunction App(): JSX.Element {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name="Connect" component={ConnectScreen} />\n        <Stack.Screen name="Room" component={RoomScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n')),(0,o.kt)("h3",{id:"connect-screen"},"Connect screen"),(0,o.kt)("p",null,"The UI of the Connect screen consists of a simple text input and a few buttons.\nThe flow for this screen is simple: user either copies the peer token from the\ndashboard or scans it with QR code scanner and presses Connect button. The QR\ncode scanner is provided by our components library and it's completely optional,\njust for convenience."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Connect screen",src:n(1056).Z,width:"1198",height:"819"})),(0,o.kt)("p",null,"The code for the UI looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/screens/Connect.tsx"',title:'"/screens/Connect.tsx"'},'import React, { useState } from "react";\nimport { View, StyleSheet } from "react-native";\nimport {\n  Button,\n  TextInput,\n  QRCodeScanner,\n} from "@jellyfish-dev/react-native-jellyfish-components";\n\nfunction ConnectScreen({ navigation }): JSX.Element {\n  const [peerToken, setPeerToken] = useState<string>("");\n\n  return (\n    <View style={styles.container}>\n      <TextInput\n        placeholder="Enter peer token"\n        value={peerToken}\n        onChangeText={setPeerToken}\n      />\n      <Button\n        onPress={() => {\n          /* to be filled */\n        }}\n        title="Connect"\n        disabled={!peerToken}\n      />\n      <QRCodeScanner onCodeScanned={setPeerToken} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: "center",\n    backgroundColor: "#BFE7F8",\n    padding: 24,\n    rowGap: 24,\n  },\n});\n\nexport default ConnectScreen;\n')),(0,o.kt)("h3",{id:"connecting-to-the-server"},"Connecting to the server"),(0,o.kt)("p",null,"Once the UI is ready, let's implement connecting to the server."),(0,o.kt)("p",null,"Firstly wrap your app with ",(0,o.kt)("inlineCode",{parentName:"p"},"JelyfishContextProvider"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'"/App.tsx"','"/App.tsx"':!0},'import React from "react";\n// highlight-next-line\nimport { JellyfishContextProvider } from "@jellyfish-dev/react-native-client-sdk";\nimport { NavigationContainer } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\nimport ConnectScreen from "./screens/Connect";\nimport RoomScreen from "./screens/Room";\n\nconst Stack = createNativeStackNavigator();\n\nfunction App(): JSX.Element {\n  return (\n    // highlight-next-line\n    <JellyfishContextProvider>\n      <NavigationContainer>\n        <Stack.Navigator>\n          <Stack.Screen name="Connect" component={ConnectScreen} />\n          <Stack.Screen name="Room" component={RoomScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n      // highlight-next-line\n    </JellyfishContextProvider>\n  );\n}\n\nexport default App;\n')),(0,o.kt)("p",null,"Then in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectScreen")," use ",(0,o.kt)("inlineCode",{parentName:"p"},"useJellyfishClient")," hook to connect to the\nserver. Simply call the ",(0,o.kt)("inlineCode",{parentName:"p"},"connect")," method with your Jellyfish server url and the\npeer token. The ",(0,o.kt)("inlineCode",{parentName:"p"},"connect")," function establishes connection with Jellyfish server\nvia web socket and authenticates the peer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/screens/Connect.tsx"',title:'"/screens/Connect.tsx"'},'// highlight-next-line\nimport { useJellyfishClient } from "@jellyfish-dev/react-native-client-sdk";\n\n// This is the address of the Jellyfish backend. Change the local IP to yours. We\n// strongly recommend setting this as an environment variable, we hardcoded it here\n// for simplicity.\n// highlight-next-line\nconst JELLYFISH_URL = "ws://192.168.81.152:4000/socket/peer/websocket";\n\nfunction ConnectScreen({ navigation }): JSX.Element {\n  const [peerToken, setPeerToken] = useState<string>("");\n\n  // highlight-next-line\n  const { connect } = useJellyfishClient();\n\n  const connectToRoom = async () => {\n    try {\n      // highlight-next-line\n      await connect(JELLYFISH_URL, peerToken.trim());\n    } catch (e) {\n      console.log("Error while connecting", e);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <TextInput\n        placeholder="Enter peer token"\n        value={peerToken}\n        onChangeText={setPeerToken}\n      />\n      <Button onPress={connectToRoom} title="Connect" disabled={!peerToken} />\n      <QRCodeScanner onCodeScanned={setPeerToken} />\n    </View>\n  );\n}\n\n// ...\n')),(0,o.kt)("h3",{id:"camera-permissions-android-only"},"Camera permissions (Android only)"),(0,o.kt)("p",null,"To start the camera we need to ask the user for a permission first. We'll use a\nstandard React Native module for this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/screens/Connect.tsx"',title:'"/screens/Connect.tsx"'},'import { View, StyleSheet, Permission, PermissionsAndroid } from "react-native";\n\n// ...\n\nfunction ConnectScreen({ navigation }): JSX.Element {\n  // ...\n\n  // highlight-start\n  const grantedCameraPermissions = async () => {\n    const granted = await PermissionsAndroid.request(\n      PermissionsAndroid.PERMISSIONS.CAMERA as Permission\n    );\n    if (granted !== PermissionsAndroid.RESULTS.GRANTED) {\n      console.error("Camera permission denied");\n      return false;\n    }\n    return true;\n  };\n  // highlight-end\n\n  const connectToRoom = async () => {\n    try {\n      await connect(JELLYFISH_URL, peerToken.trim());\n\n      // highlight-start\n      if (!(await grantedCameraPermissions())) {\n        return;\n      }\n      // highlight-end\n    } catch (e) {\n      console.log("Error while connecting", e);\n    }\n  };\n\n  // ...\n}\n\n// ...\n')),(0,o.kt)("h3",{id:"starting-the-camera"},"Starting the camera"),(0,o.kt)("p",null,"Jellyfish Client provides a handy hook for managing the camera: ",(0,o.kt)("inlineCode",{parentName:"p"},"useCamera"),". It\ncan not only start a camera, but also toggle, switch between multiple cameras,\nmanage camera state and camera track simulcast settings and bandwidth. Also when\nstarting the camera you can provide multiple different settings such as\nresolution, quality and metadata. In this example though we'll simply turn it\non to stream the camera to the dashboard with default settings:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/screens/Connect.tsx"',title:'"/screens/Connect.tsx"'},'import {\n  useJellyfishClient,\n  // highlight-next-line\n  useCamera,\n} from "@jellyfish-dev/react-native-client-sdk";\n\nfunction ConnectScreen({ navigation }): JSX.Element {\n  // ...\n\n  // highlight-next-line\n  const { startCamera } = useCamera();\n\n  const connectToRoom = async () => {\n    try {\n      await connect(JELLYFISH_URL, peerToken.trim());\n\n      if (!(await grantedCameraPermissions())) {\n        return;\n      }\n\n      // highlight-next-line\n      await startCamera();\n    } catch (e) {\n      console.log("Error while connecting", e);\n    }\n  };\n\n  // ...\n}\n\n// ...\n')),(0,o.kt)("h3",{id:"joining-the-room"},"Joining the room"),(0,o.kt)("p",null,"The last step of connecting to the room would be actually joining the room - so\nthat your camera track is visible to other users. To do this simply use ",(0,o.kt)("inlineCode",{parentName:"p"},"join")," function\nfrom ",(0,o.kt)("inlineCode",{parentName:"p"},"useJellyfishClient")," hook."),(0,o.kt)("p",null,"You can also provide some user metadata when joining. You can put there whatever\nyou want, it depends on your business logic. In our example we provide user name."),(0,o.kt)("p",null,"After joining the room we navigate to the next screen: Room screen."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/screens/Connect.tsx"',title:'"/screens/Connect.tsx"'},'// ...\n\nfunction ConnectScreen({ navigation }): JSX.Element {\n  // highlight-next-line\n  const { connect, join } = useJellyfishClient();\n\n  const connectToRoom = async () => {\n    try {\n      await connect(JELLYFISH_URL, peerToken.trim());\n\n      if (!(await grantedCameraPermissions())) {\n        return;\n      }\n\n      await startCamera();\n\n      // highlight-next-line\n      await join({ name: "Mobile RN Client" });\n      // highlight-next-line\n      navigation.navigate("Room");\n    } catch (e) {\n      console.log("Error while connecting", e);\n    }\n  };\n\n  // ...\n}\n\n// ...\n')),(0,o.kt)("p",null,"Now the app is ready for the first test. If everything went well you should see\na video from your camera in the frontend dashboard. Now onto the second part:\ndisplaying the streams from other participants."),(0,o.kt)("h2",{id:"displaying-streams-from-other-participants"},"Displaying streams from other participants"),(0,o.kt)("h3",{id:"displaying-video-tracks"},"Displaying video tracks"),(0,o.kt)("p",null,"The Room screen displays the video from the camera on your device and also\nvideos from other participants as well. It also allows user to exit the call."),(0,o.kt)("p",null,"To get information about all participants (also the local one) in the room use\n",(0,o.kt)("inlineCode",{parentName:"p"},"usePeers()")," hook from Jellyfish Client. The hook returns all the participants\nwith their ids, tracks and metadata. When a new participant joins or any\nparticipant leaves or anything else changes, the hook updates with the new\ninformation."),(0,o.kt)("p",null,"To display video tracks Jellyfish Client has a dedicated component for\ndisplaying a video track: ",(0,o.kt)("inlineCode",{parentName:"p"},"<VideoRenderer>"),". It takes a track id as a prop (it\nmay be local or remote track) and you can style it just like an ordinary\n",(0,o.kt)("inlineCode",{parentName:"p"},"<View>"),". You can even animate it!"),(0,o.kt)("p",null,"So, let's display all the participants in the simplest way possible:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/screens/Room.tsx"',title:'"/screens/Room.tsx"'},'import React from "react";\nimport { View, StyleSheet } from "react-native";\n// highlight-start\nimport {\n  usePeers,\n  VideoRendererView,\n} from "@jellyfish-dev/react-native-client-sdk";\n// highlight-end\n\nfunction RoomScreen({ navigation }): JSX.Element {\n  // highlight-next-line\n  const peers = usePeers();\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.videoContainer}>\n        // highlight-start\n        {peers.map((peer) =>\n          peer.tracks[0] ? (\n            <VideoRendererView\n              trackId={peer.tracks[0].id}\n              style={styles.video}\n            />\n          ) : null\n        )}\n        // highlight-end\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: "center",\n    justifyContent: "space-between",\n    backgroundColor: "#F1FAFE",\n    padding: 24,\n  },\n  videoContainer: {\n    flexDirection: "row",\n    gap: 8,\n    flexWrap: "wrap",\n  },\n  video: { width: 200, height: 200 },\n});\n\nexport default RoomScreen;\n')),(0,o.kt)("p",null,"You should now see your own camera on your mobile device. You can add another\nparticipant and their new track (displaying for example rotating frog) in the dashboard like\nthis:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Adding new participant",src:n(640).Z,width:"1760",height:"1148"})),(0,o.kt)("p",null,"It should show up in the Room screen automatically:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Room screen",src:n(6837).Z,width:"274",height:"640"})),(0,o.kt)("p",null,"For your convenience in our components library we provided a component to layout\nvideos in a nice grid:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/screens/Room.tsx"',title:'"/screens/Room.tsx"'},'// highlight-next-line\nimport { VideosGrid } from "@jellyfish-dev/react-native-jellyfish-components";\n\nfunction RoomScreen({ navigation }): JSX.Element {\n  const peers = usePeers();\n\n  return (\n    <View style={styles.container}>\n      // highlight-start\n      <VideosGrid\n        tracks={peers.map((peer) => peer.tracks[0]?.id).filter((t) => t)}\n      />\n      // highlight-end\n    </View>\n  );\n}\n')),(0,o.kt)("h3",{id:"gracefully-leaving-the-room"},"Gracefully leaving the room"),(0,o.kt)("p",null,"To leave a rooom we'll add a button for the user. When user clicks it, we\ngracefully leave the room, close the server connection and go back to the\nConnect screen."),(0,o.kt)("p",null,"For leaving the room and closing server connection you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"cleanUp")," method from ",(0,o.kt)("inlineCode",{parentName:"p"},"useJellyfishClient()")," hook."),(0,o.kt)("p",null,"After leaving the room we go back to the Connect screen."),(0,o.kt)("p",null,"// TODO: czy na pewno cleanUp method?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/screens/Room.tsx"',title:'"/screens/Room.tsx"'},'// ...\nimport {\n  usePeers,\n  VideoRendererView,\n  // highlight-next-line\n  useJellyfishClient,\n} from "@jellyfish-dev/react-native-client-sdk";\n// highlight-next-line\nimport { InCallButton } from "@jellyfish-dev/react-native-jellyfish-components";\n\nfunction RoomScreen({ navigation }): JSX.Element {\n  const peers = usePeers();\n  // highlight-start\n  const { cleanUp } = useJellyfishClient();\n\n  const onDisconnectPress = () => {\n    cleanUp();\n    navigation.goBack();\n  };\n  // highlight-end\n\n  return (\n    <View style={styles.container}>\n      <VideosGrid\n        tracks={peers.map((peer) => peer.tracks[0]?.id).filter((t) => t)}\n      />\n      // highlight-start\n      <InCallButton\n        type="disconnect"\n        iconName="phone-hangup"\n        onPress={onDisconnectPress}\n      />\n      // highlight-end\n    </View>\n  );\n}\n\n// ...\n')),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"Congrats on finishing your first Jellyfish mobile application! In this tutorial\nyou've learned how to make a basic Jellyfish client application that streams and\nreceives video tracks with WebRTC technology."),(0,o.kt)("p",null,"But this was just the beginning. Jellyfish Client supports much more than just\nstreaming camera: it can also stream audio, screencast your device's screen,\nconfigure your camera and audio devices, detect voice activity, control\nsimulcast, bandwidth and encoding settings, show camera preview, display WebRTC\nstats and more to come. Check out our other tutorials to learn about those\nfeatures."),(0,o.kt)("p",null,"You can also take a look at our fully featured ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jellyfish-dev/react-native-membrane-webrtc/tree/master/example"},"Videoroom Demo\nexample"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Videoroom Demo",src:n(6143).Z,width:"720",height:"720"})))}O.isMDXComponent=!0},8823:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},i=void 0,s={unversionedId:"quickstart/starting-dashboard",id:"quickstart/starting-dashboard",title:"starting-dashboard",description:"// TODO nie wiem jak to ostatecznie bedzie wygl\u0105da\u0107",source:"@site/docs/quickstart/starting-dashboard.mdx",sourceDirName:"quickstart",slug:"/quickstart/starting-dashboard",permalink:"/clients-docs/docs/quickstart/starting-dashboard",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart/starting-dashboard.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"React Native / Expo Quickstart Guide",permalink:"/clients-docs/docs/quickstart/react-native-quickstart"},next:{title:"starting-jellyfish-backend",permalink:"/clients-docs/docs/quickstart/starting-jellyfish-backend"}},l={},c=[],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"// TODO nie wiem jak to ostatecznie bedzie wygl\u0105da\u0107"))}p.isMDXComponent=!0},9239:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},i=void 0,s={unversionedId:"quickstart/starting-jellyfish-backend",id:"quickstart/starting-jellyfish-backend",title:"starting-jellyfish-backend",description:"For testing, we'll run the backend locally using Docker image:",source:"@site/docs/quickstart/starting-jellyfish-backend.mdx",sourceDirName:"quickstart",slug:"/quickstart/starting-jellyfish-backend",permalink:"/clients-docs/docs/quickstart/starting-jellyfish-backend",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart/starting-jellyfish-backend.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"starting-dashboard",permalink:"/clients-docs/docs/quickstart/starting-dashboard"}},l={},c=[],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"For testing, we'll run the backend locally using Docker image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 50000-50050:50000-50050/udp \\\n           -p 4000:4000/tcp \\\n           -e WEBRTC_USED=true \\\n           -e INTEGRATED_TURN_PORT_RANGE=50000-50050 \\\n           -e INTEGRATED_TURN_IP=192.168.0.1 \\\n           -e INTEGRATED_TURN_LISTEN_IP=0.0.0.0 \\\n           -e SERVER_API_TOKEN=development \\\n           -e VIRTUAL_HOST=192.168.0.1 \\\n           -e SECRET_KEY_BASE=secret \\\n           ghcr.io/jellyfish-dev/jellyfish:edge\n")),(0,r.kt)("p",null,"Make sure to set ",(0,r.kt)("inlineCode",{parentName:"p"},"INTEGRATED_TURN_IP")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"VIRTUAL_HOST")," to your local IP address. Without it, the mobile device won't be able to connect to the backend."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To check your local IP you can use this handy command (Linux/macOS):"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ifconfig | grep \"inet \" | grep -Fv 127.0.0.1 | awk '{print $2}'\n"))))}p.isMDXComponent=!0},640:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/adding_new_track-e8d0ce9cfc75bb797be53eae5772ee09.gif"},1481:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/app-99950a2fd0fb4f277b81e1aa45ed6802.gif"},1056:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/connect-88a620f67a2c8b7eb49676d7a513abd6.png"},8444:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/connection-ce8e7756cdcd65fe387cf34e617bea2e.png"},5001:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dashboard_connection-0c46d267a83447871297ff6f538dfc32.png"},2094:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/room_example-e9c6acb4df6063de5a8978dc6710b909.png"},6837:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/room_screen-92b763e49e0f9f3b15b5451ade1e0045.png"},6143:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/videoroom-b9c2dd933b2f8d5061aa5b5c53c19a3d.gif"}}]);