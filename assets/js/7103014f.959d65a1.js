"use strict";(self.webpackChunkclients_tutorial=self.webpackChunkclients_tutorial||[]).push([[441],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),h=i,m=p["".concat(s,".").concat(h)]||p[h]||u[h]||o;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7988:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const o={},r="Android Quickstart Guide",l={unversionedId:"quickstart/android-quickstart",id:"quickstart/android-quickstart",title:"Android Quickstart Guide",description:"What you'll learn",source:"@site/docs/quickstart/android-quickstart.mdx",sourceDirName:"quickstart",slug:"/quickstart/android-quickstart",permalink:"/clients-docs/docs/quickstart/android-quickstart",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart/android-quickstart.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Quickstart",permalink:"/clients-docs/docs/category/quickstart"},next:{title:"React Native / Expo Quickstart Guide",permalink:"/clients-docs/docs/quickstart/react-native-quickstart"}},s={},d=[{value:"What you&#39;ll learn",id:"what-youll-learn",level:2},{value:"What do you need",id:"what-do-you-need",level:2},{value:"Setup",id:"setup",level:2},{value:"Add dependencies",id:"add-dependencies",level:3},{value:"AndroidManifest.xml changes",id:"androidmanifestxml-changes",level:3},{value:"Start the Jellyfish backend",id:"start-the-jellyfish-backend",level:3},{value:"Start the dashboard web frontend",id:"start-the-dashboard-web-frontend",level:3},{value:"Connecting to the server and joining the room",id:"connecting-to-the-server-and-joining-the-room",level:2},{value:"App structure",id:"app-structure",level:3},{value:"Connect screen",id:"connect-screen",level:3},{value:"QR Code scanning",id:"qr-code-scanning",level:3},{value:"Handling camera permissions",id:"handling-camera-permissions",level:3}],c={toc:d},p="wrapper";function u(e){let{components:t,...o}=e;return(0,i.kt)(p,(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"android-quickstart-guide"},"Android Quickstart Guide"),(0,i.kt)("h2",{id:"what-youll-learn"},"What you'll learn"),(0,i.kt)("p",null,"This tutorial will guide you through creating your first Android project which\nuses Jellyfish client. By the end of the tutorial you'll have a working\napplication that connects to the frontend dashboard using WebRTC technology and\nstreams and receives camera tracks."),(0,i.kt)("p",null,"// TODO: finished app here"),(0,i.kt)("p",null,"You can check out the finished project ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/graszka22/clients-docs"},"here"),"."),(0,i.kt)("h2",{id:"what-do-you-need"},"What do you need"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a little bit of experience in creating Android apps and Jetpack Compose"),(0,i.kt)("li",{parentName:"ul"},"Android Studio, Android device")),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("h3",{id:"add-dependencies"},"Add dependencies"),(0,i.kt)("p",null,"Firstly add Jitpack repository in your app's ",(0,i.kt)("inlineCode",{parentName:"p"},"settings.gradle")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gradle"},"dependencyResolutionManagement {\n    repositories {\n        google()\n        mavenCentral()\n        // highlight-next-line\n        maven { url 'https://jitpack.io' }\n    }\n}\n")),(0,i.kt)("p",null,"Then add Jellyfish Client dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gradle"},"dependencies {\n    implementation 'com.github.jellyfish-dev:android-client-sdk:<<version>>'\n}\n")),(0,i.kt)("h3",{id:"androidmanifestxml-changes"},"AndroidManifest.xml changes"),(0,i.kt)("p",null,"In order to connect to the backend without setting up https add this line in\n",(0,i.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'    <application\n        ...\n        // highlight-next-line\n        android:usesCleartextTraffic="true">\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Don't add this line it in production apps! Using https is essential for users' security.")),(0,i.kt)("h3",{id:"start-the-jellyfish-backend"},"Start the Jellyfish backend"),(0,i.kt)("p",null,"For testing, we'll run the backend locally using Docker image:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 50000-50050:50000-50050/udp \\\n           -p 4000:4000/tcp \\\n           -e WEBRTC_USED=true \\\n           -e INTEGRATED_TURN_PORT_RANGE=50000-50050 \\\n           -e INTEGRATED_TURN_IP=192.168.0.1 \\\n           -e INTEGRATED_TURN_LISTEN_IP=0.0.0.0 \\\n           -e SERVER_API_TOKEN=development \\\n           -e VIRTUAL_HOST=192.168.0.1 \\\n           -e SECRET_KEY_BASE=secret \\\n           ghcr.io/jellyfish-dev/jellyfish:edge\n")),(0,i.kt)("p",null,"Make sure to set ",(0,i.kt)("inlineCode",{parentName:"p"},"INTEGRATED_TURN_IP")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"VIRTUAL_HOST")," to your local IP address. Without it, the mobile device won't be able to connect to the backend."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"To check your local IP you can use this handy command (Linux/macOS):"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ifconfig | grep \"inet \" | grep -Fv 127.0.0.1 | awk '{print $2}'\n"))),(0,i.kt)("h3",{id:"start-the-dashboard-web-frontend"},"Start the dashboard web frontend"),(0,i.kt)("p",null,"// TODO nie wiem jak to ostatecznie bedzie wygl\u0105da\u0107"),(0,i.kt)("h2",{id:"connecting-to-the-server-and-joining-the-room"},"Connecting to the server and joining the room"),(0,i.kt)("p",null,"Our app will consist of two screens. The first one allows user to type, paste or\nscan the peer token and connect to the room. The second screen shows room participants with their video tracks."),(0,i.kt)("p",null,"Note that normally the app gets the peer token from your backend. In this\nexample though we skip that and just copy it from the dashboard to the app to\nmake it easier. Here is how to do it:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Adding mobile peer in the dashboard",src:n(2596).Z,width:"1760",height:"1148"})),(0,i.kt)("h3",{id:"app-structure"},"App structure"),(0,i.kt)("p",null,"To write the app we'll use Jetpack Compose. Firstly, create a new Android Studio\nproject with empty Activity."),(0,i.kt)("p",null,"Then, we'll replace the default app theme. Feel free to skip this step and style\nyour components however you want, we just put them there for completness."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt",metastring:"title=Color.kt",title:"Color.kt"},"package com.example.jellyfishdashboardandroid.ui.theme\n\nval seaBlue40 = Color(0xFFBFE7F8)\nval seaBlue20 = Color(0xFFF1FAFE)\nval darkBlue100 = Color(0xFF001A72)\nval white = Color(0xFFFFFFFF)\nval darkText = Color(0xFF001A72)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt",metastring:"title=Theme.kt",title:"Theme.kt"},"package com.example.jellyfishdashboardandroid.ui.theme\n\nprivate val LightColorScheme = lightColorScheme(\n    primary = darkBlue100,\n    background = seaBlue40,\n    onPrimary = white,\n)\n\n@Composable\nfun JellyfishDashboardAndroidTheme(\n    content: @Composable () -> Unit\n) {\n    MaterialTheme(\n        colorScheme = LightColorScheme,\n        typography = Typography,\n        content = content\n    )\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt",metastring:"title=Type.kt",title:"Type.kt"},"package com.example.jellyfishdashboardandroid.ui.theme\n\nval Typography = Typography(\n    bodyLarge = TextStyle(\n        fontFamily = FontFamily.Default,\n        fontWeight = FontWeight.Normal,\n        fontSize = 16.sp,\n        lineHeight = 28.sp,\n        letterSpacing = 0.5.sp\n    ),\n    labelLarge = TextStyle(\n        fontFamily = FontFamily.Default,\n        fontWeight = FontWeight.W600,\n        fontSize = 18.sp,\n        lineHeight = 24.sp,\n        letterSpacing = 1.sp,\n    ),\n)\n")),(0,i.kt)("p",null,"Our app will contain one activity: we'll leave it named ",(0,i.kt)("inlineCode",{parentName:"p"},"MainActivity")," at it\nshould be already created by Android Studio. This activity will be paired with\none ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewModel"),", we'll name it ",(0,i.kt)("inlineCode",{parentName:"p"},"MainViewModel"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt",metastring:"title=MainViewModel.kt",title:"MainViewModel.kt"},"class MainViewModel(application: Application) : AndroidViewModel(application) {\n\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt",metastring:"title=MainActivity.kt",title:"MainActivity.kt"},"class MainActivity : ComponentActivity() {\n    private val viewModel: MainViewModel by viewModels()\n\n    //...\n}\n")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"MainActivity.kt")," we'll store code responsible for displaying things (UI). In\n",(0,i.kt)("inlineCode",{parentName:"p"},"MainViewModel.kt")," we'll store a class responsible for the business logic of the\napp (storing data, managing state of the app, connecting to the server)."),(0,i.kt)("p",null,"Of course your app might be a lot more complicated and use a different\nstructure. The two screens should be probably separated as different activities /\nfragments. For this tutorial though, this simple structure should be enough."),(0,i.kt)("h3",{id:"connect-screen"},"Connect screen"),(0,i.kt)("p",null,"The UI of the Connect screen consists of a simple text input and a few buttons.\nThe flow for this screen is simple: user either copies the peer token from the\ndashboard or scans it with QR code scanner and presses Connect button. The QR\ncode scanner is provided by our components library and it's completely optional,\njust for convenience."),(0,i.kt)("p",null,"Firstly, we need to store the peer token somewhere in the ViewModel:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt",metastring:"MainViewModel.kt","MainViewModel.kt":!0},'class MainViewModel(application: Application) : AndroidViewModel(application) {\n    val peerToken = MutableStateFlow("")\n}\n')),(0,i.kt)("p",null,"Then we'll add code for the UI:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt",metastring:"MainActivity.kt","MainActivity.kt":!0},'class MainActivity : ComponentActivity() {\n    //...\n\n    @Composable\n    fun ConnectContent() {\n        val peerToken = viewModel.peerToken.collectAsState()\n\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .fillMaxHeight()\n                .padding(10.dp),\n            verticalArrangement = Arrangement.spacedBy(\n                24.dp, alignment = Alignment.CenterVertically\n            ),\n        ) {\n            OutlinedTextField(\n                singleLine = true,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(56.dp),\n                shape = CircleShape,\n                value = peerToken.value,\n                onValueChange = { it: String -> viewModel.peerToken.value = it },\n                colors = TextFieldDefaults.textFieldColors(\n                    containerColor = Color.White\n                )\n            )\n            Button(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(56.dp),\n                onClick = { connect() } // we\'ll add this method soon\n            ) {\n                Text("Connect")\n            }\n            Button(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(56.dp),\n                onClick = { scanQRCode() }) { // we\'ll add this method soon\n                Text("QR code")\n            }\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"qr-code-scanning"},"QR Code scanning"),(0,i.kt)("p",null,"We know that copy-paste from desktop to mobile device is annoying. That's why to\ncopy the peer token from the dashboard we'll use QR code scanning. It's actually\nquite easy to add if we use a Google library to do it: no need for creating the\nUI, opening the camera, handling permissions etc. - everything is handled by the\nlibrary \ud83c\udf89"),(0,i.kt)("p",null,"Firstly, add a dependency in your ",(0,i.kt)("inlineCode",{parentName:"p"},"build.gradle"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gradle",metastring:"title=build.gradle",title:"build.gradle"},"implementation 'com.google.android.gms:play-services-code-scanner:16.1.0'\n")),(0,i.kt)("p",null,"Then scan the code like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt",metastring:"title=MainActivity.kt",title:"MainActivity.kt"},"class MainActivity : ComponentActivity() {\n    //...\n\n    private fun scanQRCode() {\n        val options = GmsBarcodeScannerOptions.Builder().setBarcodeFormats(\n            Barcode.FORMAT_QR_CODE, Barcode.FORMAT_AZTEC\n        ).enableAutoZoom().build()\n\n        val scanner = GmsBarcodeScanning.getClient(this, options)\n\n        scanner.startScan().addOnSuccessListener { barcode ->\n            val rawValue: String? = barcode.rawValue\n            if (rawValue != null) {\n                viewModel.peerToken.value = rawValue\n            }\n        }.addOnCanceledListener {\n            // Task canceled\n        }.addOnFailureListener { e ->\n            // Task failed with an exception\n        }\n    }\n}\n")),(0,i.kt)("p",null,"Make sure to handle the errors gracefully. Now if you scan the code, the peer\ntoken should appear in the text field."),(0,i.kt)("h3",{id:"handling-camera-permissions"},"Handling camera permissions"),(0,i.kt)("p",null,"Before we start connecting we want to have camera permissions sorted out. On\nAndroid we need to ask the user for a permission to use the camera before\ncreating camera track."),(0,i.kt)("p",null,"We're lazy, so we'll use a handy Google library for that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gradle",metastring:"title=build.gradle",title:"build.gradle"},"implementation 'com.google.accompanist:accompanist-permissions:0.28.0'\n")),(0,i.kt)("p",null,'If we don\'t have camera permission yet, we\'ll display "Request permissions"\nbutton, instead of "Connect" button. The button requests camera permissions. If\nthe permission is granted, we\'ll display "Connect" button instead:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt",metastring:"title=MainActivity.kt",title:"MainActivity.kt"},'    // highlight-start\n    @OptIn(ExperimentalPermissionsApi::class)\n    @Composable\n    fun ConnectButton(modifier: Modifier) {\n        val cameraPermissionState = rememberPermissionState(\n            android.Manifest.permission.CAMERA\n        )\n\n        if (cameraPermissionState.status.isGranted) {\n            Button(onClick = { viewModel.connect() }, modifier = modifier) {\n                Text("Connect")\n            }\n        } else {\n            Button(\n                onClick = { cameraPermissionState.launchPermissionRequest() }, modifier = modifier\n            ) {\n                Text("Request camera permissions")\n            }\n        }\n    }\n    // highlight-end\n\n    // ...\n\n    fun ConnectContent() {\n        // ...\n\n        Column(\n            // ...\n        ) {\n            OutlinedTextField(\n               // ...\n            )\n            // highlight-start\n            ConnectButton(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(56.dp)\n            )\n            // highlight-end\n            Button(\n                // ...\n            ) {\n                Text("QR code")\n            }\n        }\n    }\n')))}u.isMDXComponent=!0},2596:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/adding_peer-fe855d9a06e818ed6850260bedaca859.gif"}}]);